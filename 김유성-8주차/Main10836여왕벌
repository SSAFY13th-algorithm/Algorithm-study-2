import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int move[][] = {{-1, 0}, {0, 1}}; // 위, 오른쪽 
	static int M, N, bug[][], bug_grow[];
	
	public static void main(String[] args) throws IOException {
		init();
		solve();
	}
	
	static void init() throws IOException {
		st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		
		bug = new int[M][M];
		for (int i = 0; i < M; i++)
			Arrays.fill(bug[i], 1);
		
		bug_grow = new int [M + M - 1];
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());			
			int grow = 0;
			int input = Integer.parseInt(st.nextToken());
			int h = M - 1;
			int w = 0;
			for (int n = 0; n < M + M - 1; n++) {
				while (input == 0) {
					input = Integer.parseInt(st.nextToken());
					grow++;
				}
				bug[h][w] += grow;
				input--;
				
				if (h == 0)
					w++;
				else
					h--;
			}
		}
	}
	
	static void solve() {
		StringBuilder sb = new StringBuilder("");
		for (int h = 0; h < M; h++) {
			for (int w = 0; w < M; w++) {
				if (h > 0 && w > 0) {
					int max = Math.max(bug[h][w - 1], bug[h - 1][w - 1]);
					max = Math.max(max, bug[h - 1][w]);
					bug[h][w] = max;
				}
				sb.append(bug[h][w] + " ");
			}
			sb.append("\n");
		}
		System.out.print(sb.toString());
	}
		
}
