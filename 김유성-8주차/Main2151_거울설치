import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	
	static class Mirror implements Comparable<Mirror> {
		int x, y, dir, cnt;
		
		public Mirror(int x, int y, int dir, int cnt) {
			this.x = x;
			this.y = y;
			this.dir = dir;
			this.cnt = cnt;
		}

		@Override
		public int compareTo(Mirror o) {
			return this.cnt - o.cnt;
		}
		
	}

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;

	static int N;
	static List<int[]> door = new ArrayList<>();
	static char[][] map;

	static int[][] move = { { -1, 0 }, { 0, -1 }, { 1, 0 }, { 0, 1 } }; // 상, 좌, 하, 우 짝수면 상,하 홀수면 좌, 우

	public static void main(String[] args) throws IOException {
		init();
		bfs();
	}

	static void init() throws IOException {
		N = Integer.parseInt(br.readLine());
		map = new char[N][N];

		for (int i = 0; i < N; i++) {
			String line = br.readLine();
			for (int j = 0; j < N; j++) {
				map[i][j] = line.charAt(j);
				if (map[i][j] == '#') {
					door.add(new int[] { i, j });
				}
			}
		}
	}

	static boolean isOk(int x, int y, int dir, boolean[][][] visited) {
		if (x >= 0 && y >= 0 && x < N && y < N && !visited[x][y][dir] && map[x][y] != '*')
			return true;
		return false;
	}
	
	static void bfs() {
		PriorityQueue<Mirror> q = new PriorityQueue<>();
		boolean[][][] visited = new boolean[N][N][4];
		int[] first_door = door.get(0);
		int[] second_door = door.get(1);
		
		// 처음 문 위치를 기준으로 4방향을 모두 추가 해준다.
		for (int i = 0; i < 4; i++) {
			q.add(new Mirror(first_door[0], first_door[1], i, 0));
		}
		
		while (!q.isEmpty()) {
			Mirror cur = q.poll();
			
			int x = cur.x;
			int y = cur.y;
			int dir = cur.dir;
			int cnt = cur.cnt;
			
			visited[x][y][dir] = true;
			
			if (x == second_door[0] && y == second_door[1]) {
				System.out.println(cnt);
				return;
			}
			
			int nx = x + move[dir][0];
			int ny = y + move[dir][1];
			
			if(isOk(nx, ny, dir, visited)) {
				if (map[nx][ny] == '!') {
					// 거울이 '/' 방향
					q.add(new Mirror(nx, ny, (dir + 3) % 4, cnt + 1));
					q.add(new Mirror(nx, ny, (dir + 1) % 4, cnt + 1));
				}
				q.add(new Mirror(nx, ny, dir, cnt));
			}
		}
	}
}
