import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    
	static class Virus {
		int h, w, num;

		public Virus(int h, int w, int num) {
			this.h = h;
			this.w = w;
			this.num = num;
		}
	}

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;

	static int N, K, S, X, Y, map[][], move[][] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
	static List<Virus>[] virus;
	static Queue<Virus> v = new LinkedList<>();

	public static void main(String[] args) throws IOException {
		init();
		bfs();
		System.out.println(map[X][Y]);
	}

	static void bfs() {
		while (S-- > 0) {
			int n = v.size();
			while (n-- > 0) {
				Virus cur_virus = v.poll();
				int nh, nw;
				for (int i = 0; i < 4; i++) {
					nh = cur_virus.h + move[i][0];
					nw = cur_virus.w + move[i][1];
					if (nh > 0 && nw > 0 && nh <= N && nw <= N && map[nh][nw] == 0) {
						map[nh][nw] = cur_virus.num;
						v.add(new Virus(nh, nw, cur_virus.num));
					}
				}
			}
		}
	}

	static void init() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());

		map = new int[N + 1][N + 1];
		virus = new ArrayList[K + 1];
		for (int i = 1; i <= K; i++) {
			virus[i] = new ArrayList<>();
		}

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] != 0) {
					virus[map[i][j]].add(new Virus(i, j, map[i][j]));
				}
			}
		}
		st = new StringTokenizer(br.readLine());
		S = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());
		Y = Integer.parseInt(st.nextToken());

		for (int k = 1; k <= K; k++) {
			List<Virus> temp = virus[k];
			for (Virus vv : temp)
				v.add(vv);
		}
	}

}
