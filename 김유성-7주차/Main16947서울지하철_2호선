import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static List<Integer>[] subway;
	static boolean[] visited, cycle;
	static int[] distance;
	static Queue<Integer> q = new LinkedList<>();
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;

	public static void main(String[] args) throws IOException {
		init();
		for (int i = 1; i <= N; i++) {
			visited = new boolean[N + 1];
			circleCheck(i, i, 1);
		}
		
		for (int i = 1; i <= N; i++) {
			if (cycle[i])
				q.add(i); // 사이클에 속한 노드들은 큐에 저장
			else
				distance[i] = -1; // 나머지 노드들의 거리는 -1로 초기화
		}
		
		bfs();
		
		StringBuilder sb = new StringBuilder("");
		for (int i = 1; i <= N; i++) {
			sb.append(distance[i] + " ");
		}
		System.out.println(sb);
	}

	static void init() throws IOException {
		N = Integer.parseInt(br.readLine());
		
		subway = new ArrayList[N + 1];
		cycle = new boolean[N + 1];
		distance = new int [N + 1];
		
		for (int i = 1; i <= N; i++)
			subway[i] = new ArrayList<>();
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			subway[a].add(b);
			subway[b].add(a);
		}
	}
	
	static void bfs() {
		// cycle에 속한 노드들부터 인접한 노드들을 탐색해 나가면서 거리를 1씩 증가시킨다.
		while (!q.isEmpty()) {
			int cur = q.poll();
			for (int next: subway[cur]) {
				if (distance[next] == -1) { // cycle에 속하지 않았으면서 처음 방문이면
					distance[next] = distance[cur] + 1;
					q.add(next);
				}
			}
		}
	}
	
	static void circleCheck(int start, int cur, int cnt) {
		visited[cur] = true;
		
		for (int next: subway[cur]) {
			if (!visited[next])
				circleCheck(start, next, cnt + 1);
			else if (next == start && cnt >= 3) { // 시작점과 같은 노드. cnt가 3이상이면 사이클(2라면 직전 노드로 다시 가는 것일 수 있다)
				cycle[next] = true;
			}
		}
	}
	
}
