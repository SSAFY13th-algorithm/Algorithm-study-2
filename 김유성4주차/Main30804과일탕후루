import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	static int N;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		int first_num = 1;
		int temp_first_num = 1;
		int temp_second_num = 0;
		int second_num = 0;
		int max = 1;
		
		int first = Integer.parseInt(st.nextToken());
		int second = 0;
		
		for (int i = 1; i < N; i++) {
			int input = Integer.parseInt(st.nextToken());
			if (second == 0 && input != first) {
				second = input;
				second_num++;
				temp_second_num++;
                temp_first_num = 0;
			} else if (second == 0 && input == first) {
				temp_first_num++;
				first_num++;
				
			} else if (second != input && first != input) {
				max = Math.max(max, first_num + second_num); // 과일 종류가 바뀌면 지금까지 2가지의 합을 비교해서 갱신 후 변수들을 재정의
				
				if (temp_first_num == 0) { // 새로 들어 온 수 직전이 second값일 때
					first = second;
					second = input;
					
				// 4 1 1 2 2 2 1 1 2 2 3 이런 경우, first는 2, second = 3. first_num = temp_second_num, temp_first_num은 0으로 초기화
					first_num = temp_second_num; 
					temp_first_num = 0;
					
					second_num = 1;
					temp_second_num = 1;
				} else { // temp_second_num = 0; 새로 들어 온 수 직전이 first일 때
					second = input; // second만 바꿔주면 된다.
					
				// 4 1 1 2 2 2 1 1 3 이런 경우, first는 그대로, second = 3으로 갱신. first_num은 temp_first_num, temp_first_num은 0으로 초기화
					first_num = temp_first_num;
					temp_first_num = 0; //새로 들어왔으므로 temp값은 0으로 초기화
					
					second_num = 1;
					temp_second_num = 1;
				}
				
			} else if (second != input && first == input) {
				
				first_num++;
				temp_first_num++;
				temp_second_num = 0;
			}
			else { // second == input
				second_num++;
				temp_first_num = 0;
				temp_second_num++;
			}
		}
		
		// 다 끝난 다음에도 한번은 갱신해줘야 한다.
		max = Math.max(max, first_num + second_num);		
		System.out.println(max);
	}
}
