import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class MainMain4577소코반 {

	static char[][] map;
	static int R, C;
	static int start_h, start_w;
	static int[] dh = { -1, 1, 0, 0 };
	static int[] dw = { 0, 0, -1, 1 };

	static int box;
	static int box_on_goal;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int game_num = 0;
		while (true) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			R = Integer.parseInt(st.nextToken());
			C = Integer.parseInt(st.nextToken());

			if (R == 0 && C == 0) {
				return;
			}
			game_num++;
			map = new char[R][C];
			box = 0;
			box_on_goal = 0;
			for (int i = 0; i < R; i++) {
				String line = br.readLine();
				for (int j = 0; j < C; j++) {
					map[i][j] = line.charAt(j);
					if (map[i][j] == 'w') {
						start_h = i;
						start_w = j;
						map[i][j] = '.';
					} else if (map[i][j] == 'W') {
						start_h = i;
						start_w = j;
						map[i][j] = '+';						
					}
					else if (map[i][j] == 'b') {
						box++;
					} else if (map[i][j] == 'B') {
						box_on_goal++;
						box++;
					}
				}
			}
			startGame(br.readLine());
			String complete = box == box_on_goal ? "complete" : "incomplete";
			System.out.printf("Game %d: %s\n", game_num, complete);
			printMap();
		}
	}

	static void printMap() {
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				if (i == start_h && j == start_w) {
					if (map[i][j] == '+')
						System.out.print('W');
					else
						System.out.print('w');
				} else {
					System.out.print(map[i][j]);					
				}
			}
			System.out.println();
		}
	}

	// U = 0, D = 1, L = 2, R = 3
	static void startGame(String input) {
		int h = start_h;
		int w = start_w;
		for (int i = 0; i < input.length(); i++) {
			if (box == box_on_goal)
				return;
			
			char c = input.charAt(i);
			if (c == 'U') {
				moveMap(0);
			} else if (c == 'D') {
				moveMap(1);
			} else if (c == 'L') {
				moveMap(2);
			} else { // c == 'R'
				moveMap(3);
			}
		}
	}

	static void moveMap(int dir) {
		int nh = start_h + dh[dir];
		int nw = start_w + dw[dir];
		if (nh >= 0 && nw >= 0 && nh < R && nw < C) {
			if (map[nh][nw] == '#') {
				return;
			} else if (map[nh][nw] == '.' || map[nh][nw] == '+') {
				start_h = nh;
				start_w = nw;
			} else if (map[nh][nw] == 'b' || map[nh][nw] == 'B') {
				if (moveBox(nh, nw, dir)) {
					start_h = nh;
					start_w = nw;
				} 
			}
		}
	}
	
	static boolean moveBox(int h, int w, int dir) {
		int nh = h + dh[dir];
		int nw = w + dw[dir];
		if (nh >= 0 && nw >= 0 && nh < R && nw < C) {
			if (map[nh][nw] == '#' || map[nh][nw] == 'b' || map[nh][nw] == 'B') { //박스를 밀어야 하는데 벽 또는 다른 박스인 경우
				return false;
			}
			else if (map[nh][nw] == '.') {
				if (map[h][w] == 'B') { // 목표지점의 박스를 빈 곳으로 밀었을 때
					box_on_goal--;
					map[h][w] = '+';
				} else {
					map[h][w] = '.';					
				}
				map[nh][nw] = 'b';
				return true;
			} else if (map[nh][nw] == '+') {
				if (map[h][w] == 'B') { //목표지점의 박스를 또다른 목표지점으로 밀었을 때
					map[h][w] = '+';
				} else {
					box_on_goal++;
					map[h][w] = '.';					
				}
				map[nh][nw] = 'B';
				return true;
			}
		}
		return false;
	}

}
